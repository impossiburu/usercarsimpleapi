swagger: "2.0"
info:
  description: "This is simple API for car managment"
  version: "1.0.0"
  title: "Swagger CarManager"
host: "localhost"
basePath: "/api"
tags:
- name: "user"
  description: "Everything about your Users"
- name: "car"
  description: "Everything about your Cars"
schemes:
- "http"
paths:
  /users:
    post:
      tags:
      - "user"
      summary: "Create a new user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "data of user"
        required: true
        schema: 
          $ref: "#/definitions/ApiCreateUser"
      responses:
        "405":
          description: "Invalid input"
        "200":
          schema: 
            $ref: "#/definitions/User"
          description: "User created"
          
    get:
      tags:
      - "user"
      summary: "Get list of users"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
  /users/{user_id}:
    get:
      tags:
      - "user"
      summary: "Get user by user id"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "The name that needs to be fetched"
        required: true
        type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Update current user"
      produces:
      - "application/json"
      - "application/x-www-form-urlencoded"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
      - name: "car_id"
        in: "query"
        required: false
        type: "integer"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/ApiResponseUser"
      responses:
        "405":
          description: "Invalid input"
        "404":
          description: "User not found"
        "200":
          description: "User updated"
          schema: 
            $ref: "#/definitions/User"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "The id that needs to be deleted"
        required: true
        type: "integer"
      responses:
        "400":
          description: "Invalid user_id supplied"
        "404":
          description: "User not found"
        "201":
          description: "No Content"
  /cars:
    post:
      tags:
      - "car"
      summary: "Create a new car"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "data of car"
        required: true
        schema: 
          $ref: "#/definitions/ApiCreateCar"
      responses:
        "405":
          description: "Invalid input"
        "200":
          schema: 
            $ref: "#/definitions/Car"
          description: "Car created"
          
    get:
      tags:
      - "car"
      summary: "Get list of cars"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Car"
  /cars/{car_id}:
    get:
      tags:
      - "car"
      summary: "Get car by car_id"
      produces:
      - "application/json"
      parameters:
      - name: "car_id"
        in: "path"
        description: "The id that needs to be fetched"
        required: true
        type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Car"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "Car not found"
    put:
      tags:
      - "car"
      summary: "Update current car"
      produces:
      - "application/json"
      - "application/x-www-form-urlencoded"
      parameters:
      - name: "car_id"
        in: "path"
        required: true
        type: "integer"
      - name: "name"
        in: "query"
        required: false
        type: "integer"
      responses:
        "405":
          description: "Invalid input"
        "404":
          description: "User not found"
        "200":
          description: "User updated"
          schema: 
            $ref: "#/definitions/Car"
    delete:
      tags:
      - "car"
      summary: "Delete car"
      produces:
      - "application/json"
      parameters:
      - name: "car_id"
        in: "path"
        description: "The id that needs to be deleted"
        required: true
        type: "integer"
      responses:
        "400":
          description: "Invalid car_id supplied"
        "404":
          description: "Car not found"
        "201":
          description: "No Content"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      car:
        $ref: "#/definitions/Car"
  Car:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      user_id:
        type: "integer"
        format: "int32"
  ApiResponseUser:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      car_id:
        type: "integer"
        format: "int32"
  ApiCreateUser:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
  ApiCreateCar:
    type: "object"
    properties:
      name:
        type: "string"